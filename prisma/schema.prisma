// RULES::::
// 1. Model names are always singular
// 2. Table maps are to be plural
// 3. No column prefixing i.e. space_title, prop_title, org_title
// 4. Camel cased columns are to mapped to all lowercase and joined by an _ i.e createdAt = created_at
// 5. Author or Creator must always reference the User. 


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]

  organizations           OrganizationUser[]
  properties              PropertyUser[]

  comments               Comment[]

  activities             Activity[]
  activitiesAboutMe      Activity[] @relation("ActivitiesAboutMe")

  pages                 Page[]  

  proposals             Proposal[]
  
  assignedToMeTasks Task[] @relation("TasksForMe")
  assignedByMeTasks Task[] @relation("TasksByMe")

  collections          Collection[]

  reviews              Review[]
  
  @@map("users")
}

model VerificationToken {
  identifier String

  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum PersonRoles {
  user
  admin
}
enum PropertyRoles {
  admin
  owner
}
model OrganizationUser {
  id              String                  @id @default(cuid())
  user            User                    @relation(fields: [userId], references: [id])
  userId          String @unique

  organization    Organization            @relation(fields: [organizationId], references: [id])
  organizationId  String

  // TODO: Make this a space user when need be
  spaces Space[]

  role            PersonRoles @default(user)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([organizationId])
  @@index([userId])
  @@map("organization_users")
}
model Organization {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String?    @unique
  description String?

  logo        Image?    @relation(fields: [logoId], references: [id])
  logoId      String?

  users       OrganizationUser[]

  properties Property[]

  spaces Space[]

  pages Page[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([logoId])
  @@map("organizations")
}

model PropertyUser {
  id              String                  @id @default(cuid())
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String

  property Property @relation("PropertyUsers",fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyId  String
  
  role            PropertyRoles @default(admin)

  createdProperties Property[] @relation("CreatedByUser")

  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@map("property_users")
  @@index([userId])
  @@index([propertyId])
}

enum Verbs {
  created
  updated
  deleted
  expired
}

// example usage -> "(John Doe: [author]) (created: [verb]) (a new space: [descriptor])"
// example usage -> "(John Doe: [author]) (added: [verb]) (Daniel Sivewright: [about]) (to the property: [descriptor])"
// example usage -> "(Send invoices to clients: [task]) (expired: [verb]) (2 weeks ago: [descriptor])"
model Activity {
  id          String    @id @default(cuid())

  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  verb        Verbs
  descriptor String?

  propertyId String?
  property Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  taskId String?
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  aboutId String?
  about   User? @relation("ActivitiesAboutMe", fields: [aboutId], references: [id], onDelete: Cascade)

  pageId String?
  page Page? @relation(fields: [pageId], references: [id], onDelete: Cascade)

  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt


  @@index([authorId])
  @@index([propertyId])
  @@index([aboutId])
  @@index([taskId])
  @@map("activities")
  @@index([pageId])
}

model Property {
  id String @id @default(cuid())
  name String 
  description     String? @db.Text

  address String?
  type String?
  size String?

  // createdById String?
  // createdBy PropertyUser? @relation("CreatedByUser", fields: [createdById], references: [id])
  users PropertyUser[] @relation("PropertyUsers")

  createdById String?
  createdBy PropertyUser? @relation("CreatedByUser", fields: [createdById], references: [id])

  logo        Image?    @relation(fields: [logoId], references: [id])
  logoId     String?

  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId  String

  spaces      Space[]

  tasks Task[]

  pages Page[]

  activities Activity[]

  private     Boolean  @default(false)
  
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt

  @@index([logoId])
  @@index([organizationId])
  @@map("properties")
  @@index([createdById])
}
model Image {
  id            String    @id @default(cuid())
  fileKey       String
  fileUrl       String
  property      Property[]
  organization  Organization[]
  space         Space[]
  proposal      Proposal[]

  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt

  @@map("images")
}

enum ProposalStatus {
  pending      // The proposal is awaiting review.
  approved     // The proposal has been accepted by the landlord.
  rejected     // The proposal has been declined by the landlord.
  withdrawn    // The applicant has withdrawn their proposal.
  expired      // The proposal has expired (e.g., if the applicant didn't respond in time).
  canceled     // The landlord or applicant has canceled the proposal.
  waitlisted   // The applicant has been placed on a waiting list.
  in_progress  // The proposal is in the process of being reviewed or negotiated.
  completed    // The proposal has been successfully completed (e.g., lease signed).
}
enum ProposalTerm {
  month_to_month
  fixed_term
  daily
}
model Proposal {
  id          String    @id @default(cuid())

  status     ProposalStatus @default(pending)

  spaceId     String?
  space       Space?    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  
  applicantId String?
  applicant  User?     @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  term        ProposalTerm
  docs        Image[]
  letter      String? @db.Text

  startDate   String
 
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt

  @@index([spaceId])
  @@index([applicantId])
  @@map("proposals")
}
enum ListingStatus {
  draft
  published
}
model Space {
  id              String  @id @default(cuid())
  title           String?
  description     String? @db.Text
  province        String?
  street          String?
  unitNumber      String?
  suburb          String?
  city            String?
  postalCode      String?
  featureImageUrl String?
  price           Int?
  rooms           Int?
  desks           Int?
  bathrooms       Int?
  
  status          ListingStatus  @default(draft)

  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String

  property    Property?  @relation(fields: [propertyId], references: [id])
  propertyId  String?

  authorId        String?
  author          OrganizationUser?   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  typeId          String?
  type            Type?   @relation(fields: [typeId], references: [id], onDelete: Cascade)

  images          Image[]

  tasks           Task[]

  offerings       Offering[]

  highlights      Highlight[]

  amenities       Amenity[]

  proposals       Proposal[] 

  collections     Collection[] 

  reviews         Review[]

  createdAt       DateTime? @default(now()) @map("created_at")
  updatedAt       DateTime? @default(now()) @map("updated_at")

  @@index([categoryId])
  @@index([typeId])
  @@index([authorId])
  @@index([propertyId])
  @@map("spaces")
  @@index([organizationId])
}

model Review {
  id          String    @id @default(cuid())
  body        String
  rating      Int
  space       Space?    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId     String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  @@index([spaceId])
  @@index([authorId])
  @@map("reviews")
}
model Collection {
  id          String    @id @default(cuid())

  title       String
  description String?

  spaces      Space[]
  
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  @@map("collections")
  @@index([authorId])
}

model Comment {
  id          String    @id @default(cuid())
  body        String
  
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  taskId      String?
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  // spaceId     String?
  // space       Space?    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  @@index([authorId])
  @@index([taskId])
  @@map("comments")
}

// generate me an enum of statuses that I can use I can use for the todos
enum TaskStatus {
  todo
  in_progress
  blocked
  closed
  archived
}


model Task {
  id          String      @id @default(cuid())
  title       String
  description String?

  completed Boolean     @default(false)

  parentId    String?
  parent      Task?       @relation("ChildTasks", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  subTasks    Task[]      @relation("ChildTasks")
  comments    Comment[]

  property    Property?   @relation(fields: [propertyId], references: [id])
  propertyId  String?
  
  space       Space?      @relation(fields: [spaceId], references: [id])
  spaceId     String?

  status     TaskStatus  @default(todo)

  assignees   User[] @relation("TasksForMe")

  assignedById String?
  assignedBy  User? @relation("TasksByMe", fields: [assignedById], references: [id], onDelete: Cascade) 

  createdByPropertyUserId String?
 
  dueDate   DateTime?  @map("due_date")

  activities Activity[]
  
  createdAt       DateTime? @default(now()) @map("created_at")
  updatedAt       DateTime? @default(now()) @map("updated_at")

  @@index([parentId])
  @@index([propertyId])
  @@index([spaceId])
  @@index([assignedById])
  @@map("tasks")
}

model Page {
  id          String    @id @default(cuid())
  title       String

  cover String?
  icon        String?
  
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  organizationId  String?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  parentId    String?
  parent      Page?       @relation("ChildPages", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  subPages    Page[]      @relation("ChildPages")
  
  authorId    String?
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  activities    Activity[]
  
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @default(now()) @map("updated_at")

  @@index([authorId])
  @@index([parentId])
  @@index([propertyId])
  @@index([organizationId])
  @@map("pages")
}

model Category {
  id          String    @id @default(cuid())
  label       String
  description String?
  key         String?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  spaces      Space[]
  @@map("categories")
}


model Offering {
  id        String    @id @default(cuid())
  label     String
  key         String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("offerings")
}

model Highlight {
  id        String    @id @default(cuid())
  label     String
  key         String?
  icon      String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("highlights")
}

model Amenity {
  id        String    @id @default(cuid())
  label     String
  key         String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("amenities")
}

model Type {
  id          String    @id @default(cuid())
  label       String
  key         String?
  description String
  icon        String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  spaces     Space[]
  @@map("types")
}
