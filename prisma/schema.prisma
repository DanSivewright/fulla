generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]

  organizations           OrganizationUser[]
  spaces                  SpaceUser[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
model Organization {
  id          String    @id @default(cuid())
  name        String
  logo        Image?    @relation(fields: [logoId], references: [id])
  logoId      String?

  spaces      Space[]

  users       OrganizationUser[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([logoId])
  @@map("organizations")
}

enum PersonRoles {
  user
  admin
}
model OrganizationUser {
  id              String                  @id @default(cuid())
  user            User                    @relation(fields: [userId], references: [id])
  userId          String
  organization    Organization            @relation(fields: [organizationId], references: [id])
  organizationId  String
  role            PersonRoles @default(user)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([organizationId])
  @@index([userId])
  @@map("organization_users")
}
model Image {
  id            String    @id @default(cuid())
  fileKey       String
  fileUrl       String
  organization  Organization[]
  space         Space[]
  @@map("images")
}


enum ListingStatus {
  draft
  published
}

model SpaceUser {
  id              String                  @id @default(cuid())
  user            User                    @relation(fields: [userId], references: [id])
  userId          String
  space    Space            @relation(fields: [spaceId], references: [id])
  spaceId  String
  role            PersonRoles @default(user)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@index([userId])
  @@index([spaceId])
  @@map("space_users")
}
model Space {
  id              String  @id @default(cuid())
  title           String?
  description     String?
  province        String?
  street          String?
  unitNumber      String?
  suburb          String?
  city            String?
  postalCode      String?
  featureImageUrl String?
  price           Int?
  rooms           Int?
  desks           Int?
  bathrooms       Int?
  guestCount      Int?
  status          ListingStatus  @default(draft)

  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String

  users SpaceUser[]
  // authorId        String?
  // author          User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  typeId          String?
  type            Type?   @relation(fields: [typeId], references: [id], onDelete: Cascade)

  images          Image[]

  offerings       Offering[]

  highlights      Highlight[]

  amenities       Amenity[]

  createdAt       DateTime? @default(now()) @map("created_at")
  updatedAt       DateTime? @default(now()) @map("updated_at")

  @@index([categoryId])
  @@index([typeId])
  @@index([organizationId])
  @@map("spaces")
}


model Category {
  id        String    @id @default(cuid())
  label     String
  key         String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("categories")
}

model Offering {
  id        String    @id @default(cuid())
  label     String
  key         String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("offerings")
}

model Highlight {
  id        String    @id @default(cuid())
  label     String
  key         String?
  icon      String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("highlights")
}

model Amenity {
  id        String    @id @default(cuid())
  label     String
  key         String?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  spaces   Space[]
  @@map("amenities")
}

model Type {
  id          String    @id @default(cuid())
  label       String
  key         String?
  description String
  icon        String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  spaces     Space[]
  @@map("types")
}
