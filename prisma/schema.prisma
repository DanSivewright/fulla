generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String?   @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @map("updated_at")
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]
  listings               Listing[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Status {
  draft
  published
}

model Listing {
  id            String  @id @default(cuid())
  title         String?
  description   String?
  province      String?
  street        String?
  unitNumber    String?
  suburb        String?
  city          String?
  postalCode    String?
  featureImage  String?
  price         Int?
  roomCount     Int?
  bedCount      Int?
  bathroomCount Int?
  guestCount    Int?
  status        Status  @default(draft)

  authorId String?
  author   User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  typeId String?
  type   Type?   @relation(fields: [typeId], references: [id], onDelete: Cascade)

  offerings Offering[]

  highlights Highlight[]

  amenities Amenity[]

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @map("updated_at")

  @@index([authorId])
  @@index([categoryId])
  @@index([typeId])
}

model Category {
  id        String    @id @default(cuid())
  label     String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  listings  Listing[]
}

model Offering {
  id        String    @id @default(cuid())
  label     String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  listings  Listing[]
}

model Highlight {
  id        String    @id @default(cuid())
  label     String
  icon      String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  listings  Listing[]
}

model Amenity {
  id        String    @id @default(cuid())
  label     String
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
  listings  Listing[]
}

model Type {
  id          String    @id @default(cuid())
  label       String
  description String
  icon        String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  listings    Listing[]
}
